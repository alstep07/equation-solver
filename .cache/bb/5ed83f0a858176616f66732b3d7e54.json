{"id":"js/calculateExpressions.js","dependencies":[{"name":"C:\\Users\\sasha\\projects\\dev_challenge\\final\\package.json","includedInParent":true,"mtime":1639221305860}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _default = function _default(equations) {\n  equations.forEach(function (equation) {\n    var _equation = _slicedToArray(equation, 2),\n        expression = _equation[0],\n        result = _equation[1];\n  });\n};\n\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":20,"column":15},"source":"js/calculateExpressions.js","original":{"line":1,"column":15}},{"name":"equations","generated":{"line":20,"column":33},"source":"js/calculateExpressions.js","original":{"line":1,"column":16}},{"generated":{"line":20,"column":42},"source":"js/calculateExpressions.js","original":{"line":1,"column":15}},{"generated":{"line":20,"column":44},"source":"js/calculateExpressions.js","original":{"line":1,"column":30}},{"name":"equations","generated":{"line":21,"column":0},"source":"js/calculateExpressions.js","original":{"line":2,"column":2}},{"name":"equations","generated":{"line":21,"column":2},"source":"js/calculateExpressions.js","original":{"line":2,"column":2}},{"generated":{"line":21,"column":11},"source":"js/calculateExpressions.js","original":{"line":2,"column":11}},{"name":"forEach","generated":{"line":21,"column":12},"source":"js/calculateExpressions.js","original":{"line":2,"column":12}},{"generated":{"line":21,"column":19},"source":"js/calculateExpressions.js","original":{"line":2,"column":2}},{"generated":{"line":21,"column":20},"source":"js/calculateExpressions.js","original":{"line":2,"column":20}},{"name":"equation","generated":{"line":21,"column":30},"source":"js/calculateExpressions.js","original":{"line":2,"column":20}},{"generated":{"line":21,"column":38},"source":"js/calculateExpressions.js","original":{"line":2,"column":28}},{"generated":{"line":21,"column":40},"source":"js/calculateExpressions.js","original":{"line":2,"column":32}},{"generated":{"line":22,"column":0},"source":"js/calculateExpressions.js","original":{"line":3,"column":4}},{"name":"equation","generated":{"line":22,"column":35},"source":"js/calculateExpressions.js","original":{"line":3,"column":33}},{"generated":{"line":22,"column":43},"source":"js/calculateExpressions.js","original":{"line":3,"column":4}},{"generated":{"line":23,"column":0},"source":"js/calculateExpressions.js","original":{"line":3,"column":4}},{"name":"expression","generated":{"line":23,"column":8},"source":"js/calculateExpressions.js","original":{"line":3,"column":11}},{"generated":{"line":23,"column":18},"source":"js/calculateExpressions.js","original":{"line":3,"column":4}},{"generated":{"line":24,"column":0},"source":"js/calculateExpressions.js","original":{"line":3,"column":4}},{"name":"result","generated":{"line":24,"column":8},"source":"js/calculateExpressions.js","original":{"line":3,"column":23}},{"generated":{"line":24,"column":14},"source":"js/calculateExpressions.js","original":{"line":3,"column":4}},{"generated":{"line":25,"column":0},"source":"js/calculateExpressions.js","original":{"line":4,"column":3}},{"generated":{"line":25,"column":3},"source":"js/calculateExpressions.js","original":{"line":2,"column":2}},{"generated":{"line":26,"column":0},"source":"js/calculateExpressions.js","original":{"line":5,"column":1}}],"sources":{"js/calculateExpressions.js":"export default (equations) => {\r\n  equations.forEach(equation => {\r\n    const [expression, result] = equation;\r\n  });\r\n};\r\n"},"lineCount":null}},"error":null,"hash":"f5248a548be686c9be5a26037a954932","cacheData":{"env":{}}}